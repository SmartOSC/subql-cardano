# To improve query performance, we strongly suggest adding indexes to any field that you plan to filter or sort by
# Add the `@index` or `@index(unique: true)` annotation after any non-key field
# https://academy.subquery.network/build/graphql.html#indexing-by-non-primary-key-field

enum EventType {
  SendPacket
  RecvPacket
  WriteAck
  AcknowledgePacket
  TimeoutPacket
  TimeoutPacketOnClose

  ChannelOpenInit
  ChannelOpenTry
  ChannelOpenAck
  ChannelOpenConfirm
  ChannelCloseInit
  ChannelCloseConfirm
  ChannelClosed

  ConnectionOpenInit
  ConnectionOpenTry
  ConnectionOpenAck
  ConnectionOpenConfirm

  CreateClient
  UpdateClient
}

enum ChannelStateType {
  Uninitialized
  Init
  TryOpen
  Open
  Closed
}

enum ChannelOrderType {
  None
  Unordered
  Ordered
}

enum MsgType {
  SendPacket
  RecvPacket
  AcknowledgePacket
}

type ChannelCounterparty @jsonField(indexed: false) {
  portId: String!
  channelId: String! 
}

type ConnectionCounterparty @jsonField(indexed: false) {
  clientId: String!
  connectionId: String!
  prefix: String!
}

type ClientUncheckedRational @jsonField(indexed: false) {
  numerator: BigInt!
  denominator: BigInt!
}

type Height @jsonField(indexed: false) {
  revisionNumber: BigInt!
  revisionHeight: BigInt!
}

type LeafOpSchema @jsonField(indexed: false) {
  hash: BigInt!
  prehashKey: BigInt!
  prehashValue: BigInt!
  length: BigInt!
  prefix: String!
}


type ProofSpec @jsonField(indexed: false) {
  leafSpec: LeafOpSchema!
  innerSpec: InnerSpec!
  maxDepth: BigInt!
  minDepth: BigInt!
  prehashKeyBeforeComparison: Boolean!
}

type InnerSpec @jsonField(indexed: false) {
  childOrder: [BigInt]
  childSize: BigInt!
  minPrefixLength: BigInt!
  maxPrefixLength: BigInt!
  emptyChild: String!
  hash: BigInt!
}

type CardanoTransfer @entity {
  id: ID!
  ibcTokenUnit: String!
  blockHeight: BigInt!
  slot:BigInt!
  sender: String!
  receiver: String!
  sequence: String!
  srcPort: String!
  srcChannel: String!
  dstPort: String!
  dstChannel: String!
  connectionId: String!
  msgType: MsgType!
  amount: String!
  denom: String!
  memo: String
}

type Packet @entity {
  id: ID! # {src_chain_}_{src_port_id}_{src_channel_id}_{sequence}
  sequence: String!
  srcChain: String!
  srcPort: String!
  srcChannel: String!
  dstChain: String!
  dstPort: String!
  dstChannel: String!
  data:String,
  module: String,
  parentPacket: Packet,
}

type Message @entity {
  id: ID! # {chain_id}_{tx_hash}_{msg_idx}_{msg_type}
  chainId: String!
  msgIdx: BigInt
  code: BigInt
  txHash: String!
  sender: String
  receiver: String
  msgType: MsgType!
  packet: Packet!
  msgError: String
}

type EventAttribute @jsonField(indexed: false) {
  key: String!
  value: String
}

type ConnectionVersion @jsonField(indexed: false) {
  identifier: String!
  features: [String]
}

type Event @entity {
  id: ID!
  blockHeight: BigInt!
  txHash: String!
  type: EventType!
  eventAttributes: [EventAttribute]! # Store a list of JSON objects
}

type Client @entity {
  id: ID! # {chain_id}_{client_id}
  chainId: String!
  clientId: String!
  counterpartyChainId: String!
}

type Connection @entity {
  id: ID! # {chain_id}_{connection_id}
  chainId: String!
  connectionId: String!
  client: Client!
  counterpartyChainId: String!
  counterpartyClientId: String!
  counterpartyConnectionId: String!
}

type Channel @entity {
  id: ID! # {chain_id}_{port_id}_{channel_id}
  chainId: String!
  portId: String!
  channelId: String!
  connection: Connection!
  counterpartyPortId: String!
  counterpartyChannelId: String!
  counterpartyChainId: String!
}

type CardanoIbcAsset @entity {
  id: ID!
  accountAddress: String!
  denom: String!
  voucherTokenName: String!
  connectionId: String!
  srcPort: String!
  srcChannel: String!
  dstPort: String!
  dstChannel: String!
  path: String!
}